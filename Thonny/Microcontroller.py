"""
Project: Python Microcontroller v1
Description: This script (microcontroller.py) simulates a microcontroller that reads detection data from a JSON file 
             (generated by the face detection system) and writes a controller response (command) to another JSON file. 
             
Folder structure:
-----------------
Python_microcontroller_v1/
├── Python/
│   ├── System for loading data from the camera/
│   │   └── detection_data.json   <-- Input file with detection data
│   └── Reaction simulation system/
│       └── controller_response.json  <-- Output file with controller response
└── Thonny/
    └── microcontroller.py        <-- This script (Microcontroller module)
    
Paths used in this script (relative to the Thonny folder):
    - Detection data file: "..\\Python\\System for loading data from the camera\\detection_data.json"
    - Controller response file: "..\\Python\\Reaction simulation system\\controller_response.json"
    
Usage:
------
Run this script in Thonny. It will continuously read the detection data from the specified JSON file,
process it to generate a command, and save the controller response to the output JSON file.
The command is determined based on the detection results:
    - If a face is detected:
         - If a smile is detected, command = "smile"
         - Otherwise, command = "neutral"
    - If no face is detected, command = "no_face"
    Additionally, if movement is detected, a suffix "_move" is added to the command.
    
The script updates the output file every 0.5 seconds.
"""
import json
import time
import os

# Absolute paths for JSON files (adjust the file names if necessary)
detection_file = r"..\Python\System for loading data from the camera\detection_data.json"
response_file = r"..\Python\Reaction simulation system\controller_response.json"

def read_detection_data(filename):
    """
    Reads detection data from the specified JSON file.
    :param filename: Absolute path to the JSON file containing detection info.
    :return: Dictionary with detection data or None on error.
    """
    try:
        with open(filename, "r") as f:
            data = json.load(f)
        return data
    except Exception as e:
        print("Error reading detection file:", e)
        return None

def write_controller_response(response, filename):
    """
    Writes the controller's response (command) to the specified JSON file.
    :param response: Dictionary with response data.
    :param filename: Absolute path to the output JSON file.
    """
    try:
        with open(filename, "w") as f:
            json.dump(response, f)
    except Exception as e:
        print("Error writing controller response:", e)

last_save_time = time.time()  # Track the last time detection data was read and processed

while True:
    detection = read_detection_data(detection_file)
    
    if detection is not None:
        # Determine command based on detection results:
        # - If a face is detected:
        #     - If smile is detected, command = "smile"
        #     - Else, command = "neutral"
        # - Else, command = "no_face"
        if detection.get("face_detected"):
            if detection.get("smile_detected"):
                command = "smile"
            else:
                command = "neutral"
        else:
            command = "no_face"
        
        # If movement is detected, add a suffix to the command
        if detection.get("movement_detected"):
            command += "_move"
        
        response = {
            "command": command,
            "timestamp": time.time()
        }
        
        write_controller_response(response, response_file)
        print("Controller command:", command)
    
    # Process data every 0.5 seconds
    if time.time() - last_save_time >= 0.5:
        last_save_time = time.time()
    
    time.sleep(0.5)
