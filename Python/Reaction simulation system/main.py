"""
Project: Python Microcontroller v1 - Simulation
Description: This script reads the controller response from a JSON file (generated by the microcontroller module)
             and displays an animated stick figure accordingly:
             - "smile" triggers a close-up face with a smile.
             - "move" triggers a waving animation (right arm oscillates).
             - "no_face" shows a "No face detected" message.
             - Otherwise, a normal stick figure is displayed.

JSON file structure example (controller_response.json):
{
    "command": "neutral",   // or "smile", "move", "smile_move", "no_face", etc.
    "timestamp": 1743263475.8898442
}

Folder structure (example):
-----------------
Python_microcontroller_v1/
└── Python/
    └── Reaction simulation system/
        ├── controller_response.json
        └── main.py   <-- This script

Usage:
------
Run this script. It continuously reads the controller response from the JSON file,
updates the simulation state, and renders the appropriate animation.
"""

import pygame
import sys
import math
import json
import os
import time

# -------------------------------------------------------------------------
# Calculate absolute path for the controller response JSON file
# This ensures that the file is correctly found regardless of the working directory.
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
controller_response_file = os.path.join(os.getcwd(), "controller_response.json")


# -------------------------------------------------------------------------

def read_controller_response(filename):
    """
    Reads the controller's response from the specified JSON file.
    :param filename: Absolute path to the JSON file containing the response.
    :return: Dictionary with response data or None if an error occurs.
    """
    try:
        with open(filename, "r") as f:
            data = json.load(f)
        return data
    except Exception as e:
        print("Error reading controller response:", e)
        return None


def draw_stick_figure(surface, center_x, center_y, wave_offset=0):
    """
    Draws a stick figure in the position:
         o
         |
        / \
    with arms down and angled downward.
    If wave_offset != 0, the right arm oscillates around its default angle.
    """
    # --- Character Parameters ---
    head_radius = 20
    body_length = 60
    leg_length = 50
    leg_offset = 20  # spacing between legs

    # Arm angles in the "normal" position (in degrees; 0° is right, 90° up, 180° left, 270° down)
    # Left arm: 225° (angled downward to the left)
    # Right arm: 315° (angled downward to the right)
    left_arm_angle = 225
    right_arm_angle_default = 315

    # Calculate the angle for the right arm including the waving offset
    right_arm_angle = right_arm_angle_default + wave_offset

    # Arm length
    arm_length = 40

    # Calculate positions of the shoulders and hips
    shoulder_y = center_y - body_length // 2
    hip_y = center_y + body_length // 2
    shoulder = (center_x, shoulder_y)
    hip = (center_x, hip_y)

    # --- Draw the Head ---
    head_center = (center_x, shoulder_y - head_radius)
    pygame.draw.circle(surface, (0, 0, 0), head_center, head_radius, 2)

    # --- Draw the Body (from shoulders to hips) ---
    pygame.draw.line(surface, (0, 0, 0), shoulder, hip, 2)

    # --- Draw the Left Arm ---
    angle_left_rad = math.radians(left_arm_angle)
    left_arm_end = (
        shoulder[0] + arm_length * math.cos(angle_left_rad),
        shoulder[1] + arm_length * math.sin(angle_left_rad)
    )
    pygame.draw.line(surface, (0, 0, 0), shoulder, left_arm_end, 2)

    # --- Draw the Right Arm (with waving) ---
    angle_right_rad = math.radians(right_arm_angle)
    right_arm_end = (
        shoulder[0] + arm_length * math.cos(angle_right_rad),
        shoulder[1] + arm_length * math.sin(angle_right_rad)
    )
    pygame.draw.line(surface, (0, 0, 0), shoulder, right_arm_end, 2)

    # --- Draw the Legs (from hips, slightly spaced) ---
    left_leg_end = (hip[0] - leg_offset, hip[1] + leg_length)
    right_leg_end = (hip[0] + leg_offset, hip[1] + leg_length)
    pygame.draw.line(surface, (0, 0, 0), hip, left_leg_end, 2)
    pygame.draw.line(surface, (0, 0, 0), hip, right_leg_end, 2)


def draw_closeup_face(surface, center_x, center_y):
    """
    Draws a close-up of the face with a smile.
    """
    face_radius = 80
    # Draw the face outline
    pygame.draw.circle(surface, (0, 0, 0), (center_x, center_y), face_radius, 2)

    # Draw the eyes
    eye_radius = 5
    eye_offset_x = 30
    eye_offset_y = 20
    pygame.draw.circle(surface, (0, 0, 0), (center_x - eye_offset_x, center_y - eye_offset_y), eye_radius)
    pygame.draw.circle(surface, (0, 0, 0), (center_x + eye_offset_x, center_y - eye_offset_y), eye_radius)

    # Draw the smile (arc from 180° to 360°)
    mouth_rect = pygame.Rect(center_x - 40, center_y, 80, 40)
    pygame.draw.arc(surface, (0, 0, 0), mouth_rect, math.radians(180), math.radians(360), 2)


def draw_no_face_message(surface, center_x, center_y):
    """
    Draws a message indicating that no face was detected.
    """
    font = pygame.font.SysFont(None, 48)
    text = font.render("No face detected", True, (200, 0, 0))
    text_rect = text.get_rect(center=(center_x, center_y))
    surface.blit(text, text_rect)


def main():
    pygame.init()
    screen_width, screen_height = 800, 600
    screen = pygame.display.set_mode((screen_width, screen_height))
    pygame.display.set_caption("Stickman Reaction Simulation")
    clock = pygame.time.Clock()

    # Variables for waving animation
    wave_offset = 0
    wave_direction = 1  # change in angle per frame (in degrees)

    # Default state is normal
    state = "normal"

    # Main loop: continuously update the simulation based on JSON data
    running = True
    while running:
        # Handle quit events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # Clear the screen with a white background
        screen.fill((255, 255, 255))

        # Read controller response from the JSON file
        response = read_controller_response(controller_response_file)
        command = ""
        if response is not None:
            command = response.get("command", "")

        # Determine the simulation state based on the command:
        # - If "move" is in the command, use waving state.
        # - Else if "smile" is in the command, use closeup state.
        # - Else if "no_face" is in the command, display a no-face message.
        # - Otherwise, use normal state.
        if "move" in command:
            state = "waving"
        elif "smile" in command:
            state = "closeup"
        elif "no_face" in command:
            state = "no_face"
        else:
            state = "normal"

        # Draw according to the current state
        if state == "normal":
            draw_stick_figure(screen, screen_width // 2, screen_height // 2, wave_offset=0)
        elif state == "waving":
            draw_stick_figure(screen, screen_width // 2, screen_height // 2, wave_offset)
            # Update the waving angle
            wave_offset += 3 * wave_direction
            if wave_offset > 30 or wave_offset < -30:
                wave_direction *= -1
        elif state == "closeup":
            draw_closeup_face(screen, screen_width // 2, screen_height // 2)
        elif state == "no_face":
            draw_stick_figure(screen, screen_width // 2, screen_height // 2, wave_offset=0)
            draw_no_face_message(screen, screen_width // 2, screen_height // 2 + 100)

        # Update the display and maintain 30 FPS
        pygame.display.flip()
        clock.tick(30)

    pygame.quit()
    sys.exit()


if __name__ == "__main__":
    main()
